package ast

var TokenKindKeyword map[string]TokenKind = map[string]TokenKind{
	"#":        TokenKindNotes,
	"(":        TokenKindBracketStart,
	")":        TokenKindBracketEnd,
	".":        TokenKindDot,
	",":        TokenKindComma,
	"[":        TokenKindSquareBracketStart,
	"]":        TokenKindSquareBracketEnd,
	"{":        TokenKindCurlyBracketStart,
	"}":        TokenKindCurlyBracketEnd,
	";":        TokenKindBranch,
	"=":        TokenKindAssign,
	"!":        TokenKindExclamation,
	"+":        TokenKindPlus,
	"++":       TokenKindPlusPlus,
	"+=":       TokenKindPlusAssign,
	"-":        TokenKindSub,
	"--":       TokenKindSubSub,
	"-=":       TokenKindSubAssign,
	"*":        TokenKindMulti,
	"*=":       TokenKindMultiAssign,
	"/":        TokenKindDiv,
	"/=":       TokenKindDivAssign,
	"%":        TokenKindRem,
	"%=":       TokenKindRemAssign,
	"<<":       TokenKindBitMoveLeft,
	"<<=":      TokenKindBitMoveLeftAssign,
	">>":       TokenKindBitMoveRight,
	">>=":      TokenKindBitMoveRightAssign,
	"|":        TokenKindBitOr,
	"&":        TokenKindBitAnd,
	">":        TokenKindGreater,
	">=":       TokenKindGreaterEquals,
	"<":        TokenKindLess,
	"<=":       TokenKindLessEquals,
	"==":       TokenKindEquals,
	"&&":       TokenKindAnd,
	"||":       TokenKindOr,
	"if":       TokenKindIf,
	"else":     TokenKindElse,
	"for":      TokenKindFor,
	"continue": TokenKindContinue,
	"break":    TokenKindBreak,
	"func":     TokenKindFunc,
	"return":   TokenKindReturn,
	"switch":   TokenKindSwitch,
	"case":     TokenKindCase,
	"default":  TokenKindDefault,
	"import":   TokenKindImport,
	"export":   TokenKindExport,
	"include":  TokenKindInclude,
	"base64":   TokenKindBase64,
	"hex":      TokenKindHex,
}
